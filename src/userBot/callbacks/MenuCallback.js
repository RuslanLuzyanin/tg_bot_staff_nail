const MenuService = require('../../shared/services/menuService');
const GetSlotHoursService = require('../services/getSlotHoursService');
const AvailableTimeService = require('../services/availableTimeService');

const {GroupProcedure, Procedure, WorkingTime, Record} = require('../../database/models/index');

const {Markup} = require('telegraf');
const moment = require('moment');
const {receptionAddress, regId} = require('../../config/config');

class MenuCallback {
    /**
     * –°–æ–∑–¥–∞—ë—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
     *
     */
    static async createMainMenu(ctx) {
        const menuData = [
            {text: '–ó–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏—ë–º', callback: 'menu_to_slot_menu'},
            {text: '–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å', callback: 'menu_to_cancel_appointment'},
            {text: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–ø–∏—Å—å', callback: 'menu_to_check_appointment'},
        ];

        const keyboard = Markup.inlineKeyboard(MenuService.createMenu(menuData));
        await ctx.editMessageText('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', keyboard);
    }

    /**
     * –°–æ–∑–¥–∞—ë—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å–ª–æ—Ç–æ–≤.
     *
     * –í—ã–±–æ—Ä —Å–ª–æ—Ç–æ–≤ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –∏–∑ 4-—ë—Ö (—É—Ç—Ä–æ, –¥–µ–Ω—å, –≤–µ—á–µ—Ä, –ª—é–±—ã–µ).
     *
     */
    static async createSlotMenu(ctx) {
        const {selectedSlot} = ctx.session;
        const {startTime, endTime} = await WorkingTime.findOne();

        const slotNames = {
            morning: '–£—Ç—Ä–æ',
            day: '–î–µ–Ω—å',
            evening: '–í–µ—á–µ—Ä',
            any: '–õ—é–±—ã–µ',
        };

        const morningSlot = GetSlotHoursService.getSlotHours('morning', startTime, endTime, 0);
        const daySlot = GetSlotHoursService.getSlotHours('day', startTime, endTime, 0);
        const eveningSlot = GetSlotHoursService.getSlotHours('evening', startTime, endTime, 0);
        const anySlot = GetSlotHoursService.getSlotHours('any', startTime, endTime, 0);

        const formatSlotTime = (slot) => `${slot[0].format('HH:mm')} - ${slot[1].format('HH:mm')}`;

        if (selectedSlot) {
            const slotTime = GetSlotHoursService.getSlotHours(selectedSlot, startTime, endTime, 0);

            const russianSlotName = slotNames[selectedSlot];

            const confirmMessage = [
                `‚úÖ –¢–µ–∫—É—â–∏–π —Å–ª–æ—Ç:`,
                `üìÖ ${russianSlotName} (${formatSlotTime(slotTime)}).\n`,
                `üîç –≠—Ç–æ—Ç —Å–ª–æ—Ç –ø–æ–∑–≤–æ–ª–∏—Ç —Ç–µ–±–µ –ª–µ–≥–∫–æ –Ω–∞—Ö–æ–¥–∏—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø–∏—Å–∏.\n`,
                `‚ùì –•–æ—á–µ—à—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–≤–æ–π –≤—ã–±–æ—Ä –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å —Å–ª–æ—Ç?`,
            ].join('\n');

            const confirmKeyboard = Markup.inlineKeyboard([
                Markup.button.callback('–ü–æ–¥–≤–µ—Ä–¥–∏—Ç—å', 'app_select_slot_confirm'),
                Markup.button.callback('–ò–∑–º–µ–Ω–∏—Ç—å', 'change_select_slot'),
                Markup.button.callback('–ù–∞–∑–∞–¥', 'menu_to_main_menu'),
            ]);
            await ctx.editMessageText(confirmMessage, confirmKeyboard);
            return;
        }

        const menuData = [
            {
                text: `${slotNames.morning} (${formatSlotTime(morningSlot)})`,
                callback: 'app_select_slot_morning',
            },
            {
                text: `${slotNames.day} (${formatSlotTime(daySlot)})`,
                callback: 'app_select_slot_day',
            },
            {
                text: `${slotNames.evening} (${formatSlotTime(eveningSlot)})`,
                callback: 'app_select_slot_evening',
            },
            {
                text: `${slotNames.any} (${formatSlotTime(anySlot)})`,
                callback: 'app_select_slot_any',
            },
        ];
        menuData.push({text: '–ù–∞–∑–∞–¥', callback: 'menu_to_main_menu'});

        const keyboard = Markup.inlineKeyboard(MenuService.createMenu(menuData, 1));

        const confirmMessage = [
            `üîç –î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–∏ –≤—ã–±–µ—Ä–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫. \n`,
            `üìÖ –û–ø—Ä–µ–¥–µ–ª–∏–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è, —Ç—ã —É–≤–∏–¥–∏—à—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –≤ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥. \n`,
            `‚ú® –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –±—ã—Å—Ç—Ä–æ —Å–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –≤–∞—Ä–∏–∞–Ω—Ç–∞—Ö –∏ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω—É–∂–Ω—É—é –ø—Ä–æ—Ü–µ–¥—É—Ä—É.`,
        ].join('\n');

        await ctx.editMessageText(confirmMessage, keyboard);
    }

    /**
     * –°–æ–∑–¥–∞—ë—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã –ø—Ä–æ—Ü–µ–¥—É—Ä.
     */
    static async createGroupProcedureMenu(ctx) {
        const groupProcedures = await GroupProcedure.find();

        const menuData = groupProcedures.map((groupProcedure) => ({
            text: groupProcedure.russianName,
            callback: `app_select_group_${groupProcedure.englishName}`,
        }));

        menuData.push({text: '–ù–∞–∑–∞–¥', callback: 'menu_to_slot_menu'});

        const keyboard = Markup.inlineKeyboard(MenuService.createMenu(menuData));
        await ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ—Ü–µ–¥—É—Ä—ã:', keyboard);
    }

    /**
     * –°–æ–∑–¥–∞—ë—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã.
     *
     * –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å 3 –∑–∞–ø–∏—Å–∏, –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –Ω–µ —Å–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é.
     *
     */
    static async createProcedureMenu(ctx) {
        const {appointments, selectedGroupProcedure} = ctx.session;
        const {from} = ctx;
        const userId = from.id.toString();

        if (appointments.length >= 3 && userId !== regId) {
            throw new Error('recordLimitError');
        }

        const procedures = await Procedure.find({englishName: {$regex: `^${selectedGroupProcedure}`}});

        let descriptionText = '–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä:\n\n';
        procedures.forEach(procedure => {
            const hours = Math.floor(procedure.duration);
            const minutes = Math.round((procedure.duration - hours) * 60);

            descriptionText += `${procedure.russianName}\n`;

            if (minutes === 0) {
                descriptionText += `–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${hours} —á.\n`;
            } else {
                descriptionText += `–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${hours} —á. ${minutes} –º–∏–Ω.\n`;
            }

            descriptionText += `–¶–µ–Ω–∞: ${procedure.price} ‚ÇΩ\n\n`;
        });
        descriptionText += '–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –ø—Ä–æ—Ü–µ–¥—É—Ä–∞—Ö –Ω–∞–ø–∏—Å–∞–Ω–æ –≤ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–µüòâ\n'
        descriptionText += '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—É:\n\n';

        const menuData = procedures.map((procedure) => ({
            text: procedure.russianName,
            callback: `app_select_procedure_${procedure.englishName}`,
        }));

        menuData.push({text: '–ù–∞–∑–∞–¥', callback: 'menu_to_group_procedure_menu'});

        const keyboard = Markup.inlineKeyboard(MenuService.createMenu(menuData, 1));
        await ctx.editMessageText(descriptionText, keyboard);
    }

    /**
     * –°–æ–∑–¥–∞—ë—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞.
     *
     * –í—ã–±–æ—Ä –º–µ—Å—è—Ü–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –∏–∑ 2-—É—Ö (—Ç–µ–∫—É—â–∏–π –∏ —Å–ª–µ–¥—É—é—â–∏–π).
     *
     */
    static async createMonthMenu(ctx) {
        const currentDate = moment();
        const isLastDayOfMonth = currentDate.date() === currentDate.daysInMonth();
        let currentMonth, currentYear, nextMonth, nextYear;

        if (isLastDayOfMonth) {
            currentMonth = (currentDate.month() + 2) % 12 || 12;
            currentYear = currentMonth === 1 ? currentDate.year() + 1 : currentDate.year();
            nextMonth = (currentMonth % 12) + 1;
            nextYear = nextMonth === 1 ? currentYear + 1 : currentYear;
        } else {
            currentMonth = currentDate.month() + 1;
            currentYear = currentDate.year();
            nextMonth = (currentMonth % 12) + 1;
            nextYear = nextMonth === 1 ? currentYear + 1 : currentYear;
        }

        function formatMonthYear(month, year) {
            const monthName = moment(`${year}-${month}`, 'YYYY-M').locale('ru').format('MMMM');
            return `${monthName[0].toUpperCase() + monthName.slice(1)} ${year}`;
        }

        const menuData = [
            {
                text: formatMonthYear(currentMonth, currentYear),
                callback: `app_select_month_${currentMonth}_${currentYear}`,
            },
            {
                text: formatMonthYear(nextMonth, nextYear),
                callback: `app_select_month_${nextMonth}_${nextYear}`,
            },
            {text: '–ù–∞–∑–∞–¥', callback: 'menu_to_procedure_menu'},
        ];

        const keyboard = Markup.inlineKeyboard(MenuService.createMenu(menuData, 2));
        await ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:', keyboard);
    }

    /**
     * –°–æ–∑–¥–∞—ë—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –¥–Ω—è.
     *
     * –í—ã–±–æ—Ä –¥–Ω—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –∏–∑ –¥–Ω–µ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞, –Ω–∞—á–∏–Ω–∞—è —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è, –µ—Å–ª–∏
     * –º–µ—Å—è—Ü —Ç–µ–∫—É—â–∏–π, –∏ —Å 1-–≥–æ –¥–Ω—è, –µ—Å–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π.
     * –ï—Å–ª–∏ –¥–µ–Ω—å –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑-–∑–∞ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –∏–ª–∏ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ - –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è, —É—á–∏—Ç—ã–≤–∞–µ—Ç
     * –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ª–æ—Ç.
     *
     */
    static async createDayMenu(ctx) {
        const {selectedMonth, selectedYear, selectedProcedure, selectedSlot} = ctx.session;
        const currentDate = moment();
        let startDate;

        if (selectedMonth !== currentDate.format('M')) {
            startDate = moment(`${selectedYear}-${selectedMonth}-01`, 'YYYY-MM-DD').startOf('month');
        } else {
            startDate = moment().add(1, 'day').startOf('day');
        }

        const endDate = moment(startDate).endOf('month');
        const menuData = [];

        const {startTime, endTime} = await WorkingTime.findOne();
        const procedures = await Procedure.find({}, {englishName: 1, duration: 1});
        const selectedProcedureDuration = procedures.find(
            (proc) => proc.englishName === selectedProcedure
        ).duration;

        const [slotStartMoment, slotEndMoment] = GetSlotHoursService.getSlotHours(
            selectedSlot,
            startTime,
            endTime,
            selectedProcedureDuration
        );

        while (startDate.isSameOrBefore(endDate)) {
            const formattedDate = startDate.format('DD.MM.YYYY');
            let isDateAvailable = false;

            const records = await Record.find({
                date: startDate.toDate(),
                time: {
                    $gte: slotStartMoment.format('HH:mm'),
                    $lt: slotEndMoment.format('HH:mm'),
                },
            });

            const availableTimes = AvailableTimeService.getAvailableTimes({
                slotStartTime: slotStartMoment.format('HH:mm'),
                slotEndTime: slotEndMoment.format('HH:mm'),
                records,
                procedureDuration: selectedProcedureDuration,
                procedures,
            });

            if (availableTimes.length > 0) {
                isDateAvailable = true;
            }

            if (isDateAvailable) {
                menuData.push({
                    text: startDate
                        .locale('ru')
                        .format('dd, D MMM')
                        .toLowerCase()
                        .replace(/(?:^|\s)\S/g, (a) => a.toUpperCase()),
                    callback: `app_select_day_${formattedDate}`,
                });
            }

            startDate.add(1, 'day');
        }

        menuData.push({text: '–ù–∞–∑–∞–¥', callback: `menu_to_month_menu`});

        const keyboard = Markup.inlineKeyboard(MenuService.createMenu(menuData, 3));
        await ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å:', keyboard);
    }

    /**
     * –°–æ–∑–¥–∞—ë—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏.
     *
     * –í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –∏—Å—Ö–æ–¥—è –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.
     *
     */
    static async createTimeMenu(ctx) {
        const {selectedProcedure, selectedDate, selectedSlot} = ctx.session;
        const {startTime, endTime} = await WorkingTime.findOne();
        const procedures = await Procedure.find({}, {englishName: 1, duration: 1});
        const selectedProcedureDuration = procedures.find(
            (proc) => proc.englishName === selectedProcedure
        ).duration;

        const [slotStartMoment, slotEndMoment] = GetSlotHoursService.getSlotHours(
            selectedSlot,
            startTime,
            endTime,
            selectedProcedureDuration
        );

        const records = await Record.find({
            date: selectedDate,
        });

        const availableTimes = AvailableTimeService.getAvailableTimes({
            slotStartTime: slotStartMoment.format('HH:mm'),
            slotEndTime: slotEndMoment.format('HH:mm'),
            records,
            procedureDuration: selectedProcedureDuration,
            procedures,
        });

        const menuData = availableTimes.map((time) => ({
            text: time,
            callback: `app_select_time_${time}`,
        }));

        menuData.push({text: '–ù–∞–∑–∞–¥', callback: `menu_to_day_menu`});

        const keyboard = Markup.inlineKeyboard(MenuService.createMenu(menuData, 4));
        await ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:', keyboard);
    }

    /**
     * –°–æ–∑–¥–∞—ë—Ç –º–µ–Ω—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–¥—É—Ä—ã.
     *
     * –î–∞–Ω–Ω—ã–µ –±–µ—Ä—É—Ç—Å—è –∏–∑ —Å–µ—Å—Å–∏–π.
     *
     */
    static async createConfirmationMenu(ctx) {
        const {selectedDate, selectedTime, selectedProcedure: selectedProcedureEnglishName} = ctx.session;
        const selectedDateMoment = moment(selectedDate, 'DD.MM.YYYY');
        const formattedDate = selectedDateMoment.locale('ru').format('D MMM');
        const dayOfWeek = selectedDateMoment.locale('ru').format('dddd');

        const procedures = await Procedure.find({});
        const {
            duration: selectedProcedureDuration,
            russianName: selectedProcedureRussianName,
            price: selectedProcedurePrice
        } =
            procedures.find((proc) => proc.englishName === selectedProcedureEnglishName);

        const records = await Record.find({
            date: selectedDate,
        });
        let isAvailable = true;
        let currentTime = moment(selectedTime, 'HH:mm');

        isAvailable = AvailableTimeService.checkAvailability(
            currentTime,
            records,
            selectedProcedureDuration,
            procedures
        );

        if (!isAvailable) {
            throw new Error('appointmentConflictError');
        }

        const hours = Math.floor(selectedProcedureDuration);
        const minutes = Math.round((selectedProcedureDuration - hours) * 60);

        const message = [
            `üóìÔ∏è –ó–∞–ø–∏—Å—ã–≤–∞—é –Ω–∞`,
            `      ${formattedDate} (${dayOfWeek}) –≤ ${selectedTime}?`,
            `üíº –¢–≤–æ—è –ø—Ä–æ—Ü–µ–¥—É—Ä–∞: ${selectedProcedureRussianName}`,
            `‚è≥ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${minutes === 0 ? `${hours} —á.` : `${hours} —á. ${minutes} –º–∏–Ω.`}`,
            `üè∑Ô∏è –¶–µ–Ω–∞: ${selectedProcedurePrice} ‚ÇΩ`,
        ].join('\n');

        const menuData = [
            {text: '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback: 'app_confirm'},
            {text: '–ù–∞–∑–∞–¥', callback: 'menu_to_time_menu'},
        ];

        const keyboard = Markup.inlineKeyboard(MenuService.createMenu(menuData));

        await ctx.editMessageText(message, keyboard);
    }

    /**
     * –°–æ–∑–¥–∞—ë—Ç –º–µ–Ω—é —Å –∑–∞–ø–∏—Å—è–º–∏, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø–∏—Å–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.
     *
     */
    static async createCheckAppointmentsMenu(ctx) {
        const {appointments} = ctx.session;

        if (!appointments || appointments.length === 0) {
            const message = await ctx.reply('–£ –í–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã.');
            setTimeout(() => ctx.deleteMessage(message.message_id), 3000);
            return;
        }

        const procedures = await Procedure.find({}, {englishName: 1, russianName: 1});
        const procedureMap = new Map(procedures.map((p) => [p.englishName, p.russianName]));

        let message = [
            `–ñ–¥—É —Ç–µ–±—è –∫ —Å–µ–±–µ –≤ –≥–æ—Å—Ç–∏üíñ`,
            `üè† –ü–æ –∞–¥—Ä–µ—Å—É: ${receptionAddress}.\n`,
            `–¢–≤–æ–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã:\n`,
        ].join('\n');

        for (const {procedure, date, time} of appointments) {
            const formattedDate = moment(date).locale('ru').format('D MMM');
            message += `‚òëÔ∏è ${procedureMap.get(procedure)} (${formattedDate} –≤ ${time})\n`;
        }

        const menuData = [{text: '–ù–∞–∑–∞–¥', callback: 'menu_to_main_menu'}];
        const keyboard = Markup.inlineKeyboard(MenuService.createMenu(menuData));
        await ctx.editMessageText(message, keyboard);
    }

    /**
     * –°–æ–∑–¥–∞—ë—Ç –º–µ–Ω—é –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
     *
     */
    static async createCancelAppointmentsMenu(ctx) {
        const {appointments} = ctx.session;

        if (!appointments || appointments.length === 0) {
            const message = await ctx.reply('–£ –í–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã.');
            setTimeout(() => ctx.deleteMessage(message.message_id), 3000);
            return;
        }

        const procedures = await Procedure.find({}, {englishName: 1, russianName: 1});
        const procedureMap = new Map(procedures.map((p) => [p.englishName, p.russianName]));

        let message = '–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è –æ—Ç–º–µ–Ω—ã:\n\n';
        const menuData = [];

        for (const {procedure, date, time} of appointments) {
            const formattedDate = moment(date).locale('ru').format('D MMM');
            const buttonText = `${procedureMap.get(procedure)} (${formattedDate} –≤ ${time})`;
            menuData.push({
                text: buttonText,
                callback: `app_cancel_${procedure}_${moment(date).format('DD.MM.YYYY')}_${time}`,
            });
        }

        menuData.push({text: '–ù–∞–∑–∞–¥', callback: 'menu_to_main_menu'});
        const keyboard = Markup.inlineKeyboard(MenuService.createMenu(menuData, 1));
        await ctx.editMessageText(message, keyboard);
    }
}

module.exports = MenuCallback;
