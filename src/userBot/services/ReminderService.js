const Record = require('../../db/models/record');
const Procedure = require('../../db/models/procedure');
const moment = require('moment');
/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∑–∞–ø–∏—Å—è—Ö –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã.
 */
class ReminderService {
    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ –∑–∞–ø–∏—Å—è—Ö –Ω–∞ –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å.
     *
     * @param {Telegraf} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ Telegraf.
     */
    static async sendReminders(bot) {
        const tomorrow = {
            start: moment().startOf('day').add(1, 'day').toDate(),
            end: moment().endOf('day').add(1, 'day').toDate(),
        };

        const records = await Record.aggregate([
            {
                $match: {
                    date: {
                        $gte: tomorrow.start,
                        $lt: tomorrow.end,
                    },
                },
            },
            {
                $group: {
                    _id: '$userId',
                    appointments: { $push: '$$ROOT' },
                },
            },
            {
                $lookup: {
                    from: 'users',
                    localField: '_id',
                    foreignField: 'id',
                    as: 'user',
                },
            },
            {
                $unwind: '$user',
            },
        ]);

        const procedures = await Procedure.find();
        const proceduresByEnglishName = procedures.reduce((acc, proc) => {
            acc[proc.englishName] = proc;
            return acc;
        }, {});

        const messagePromises = [];
        for (const { user, appointments } of records) {
            let skipCount = 0;
            for (const appointment of appointments) {
                if (skipCount > 0) {
                    skipCount--;
                    continue;
                }
                const procedure =
                    proceduresByEnglishName[appointment.procedure];
                const formattedDate = moment(appointment.date)
                    .locale('ru')
                    .format('D MMM');
                const message = [
                    `–ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –∑–∞–≤—Ç—Ä–∞(${formattedDate}) –≤ ${appointment.time},`,
                    `—É –í–∞—Å –ø—Ä–æ—Ü–µ–¥—É—Ä–∞ - ${procedure.russianName}.`,
                    `–ï—Å–ª–∏ –í–∞—à–∏ –ø–ª–∞–Ω—ã –ø–æ–º–µ–Ω—è–ª–∏—Å—å —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–∞—Å—Ç–µ—Ä–æ–º –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –∑–∞–ø–∏—Å—å.`,
                    `–ñ–¥—ë–º –í–∞—Å üòâ`,
                ].join('\n');
                messagePromises.push(
                    bot.telegram.sendMessage(user.chatId, message)
                );
                skipCount = procedure.duration - 1;
            }
        }

        await Promise.all(messagePromises);
    }
}

module.exports = ReminderService;
