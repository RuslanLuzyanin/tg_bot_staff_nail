const cron = require('node-cron');
const moment = require('moment');
const path = require('path');
const fs = require('fs');

const {Record, Notification, User} = require('../../database/models/index');

class ScheduledTasksHandler {
    /**
     * –°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ ScheduledTasksHandler.
     *
     * @param {Object} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.
     * @param {Object} logger - –õ–æ–≥–≥–µ—Ä –¥–ª—è –≤–µ–¥–µ–Ω–∏—è –∂—É—Ä–Ω–∞–ª–æ–≤.
     */
    constructor(bot, logger) {
        this.bot = bot;
        this.logger = logger;
    }

    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.
     * –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∞—é—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 10:00.
     */
    async scheduleReminders() {
        cron.schedule('0 10 * * *', async () => {
            const tomorrow = {
                start: moment().startOf('day').add(1, 'day').toDate(),
                end: moment().endOf('day').add(1, 'day').toDate(),
            };

            const records = await Record.aggregate([
                {
                    $match: {
                        date: {
                            $gte: tomorrow.start,
                            $lt: tomorrow.end,
                        },
                    },
                },
                {
                    $group: {
                        _id: '$userId',
                        appointments: {$push: '$$ROOT'},
                    },
                },
                {
                    $lookup: {
                        from: 'users',
                        localField: '_id',
                        foreignField: 'id',
                        as: 'user',
                    },
                },
                {
                    $unwind: '$user',
                },
            ]);

            const messagePromises = [];
            for (const {user, appointments} of records) {
                for (const appointment of appointments) {
                    const formattedDate = moment(appointment.date).locale('ru').format('D MMM');
                    const message = [
                        `–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! ‚òÄÔ∏è`,
                        `–ù–∞–ø–æ–º–∏–Ω–∞—é, —á—Ç–æ –∑–∞–≤—Ç—Ä–∞(${formattedDate}) –≤ ${appointment.time}, —É —Ç–µ–±—è –∑–∞–ø–∏—Å—å –∫–æ –º–Ω–µ –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—Éü•∞`,
                        `–ï—Å–ª–∏ —Ç–≤–æ–∏ –ø–ª–∞–Ω—ã –ø–æ–º–µ–Ω—è–ª–∏—Å—å, —Å–≤—è–∂–∏—Å—å —Å–æ –º–Ω–æ–π –∏–ª–∏ –æ—Ç–º–µ–Ω–∏ –∑–∞–ø–∏—Å—å ü´∂`,
                    ].join('\n');
                    messagePromises.push(this.bot.telegram.sendMessage(user.chatId, message));
                }
            }

            await Promise.all(messagePromises);
            this.logger.info('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã');
        });
    }


    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–π —á–∞—Å.
     * –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∞—é—Ç—Å—è –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è.
     */
    async scheduleHourlyReminders() {
        cron.schedule('*/15 * * * *', async () => {
            const now = moment();
            const oneHourFromNow = moment().add(1, 'hour');

            const startTime = moment(now).add(55, 'minutes').format('HH:mm');
            const endTime = moment(oneHourFromNow).add(5, 'minutes').format('HH:mm');

            const todayStart = moment().startOf('day').toDate();
            const todayEnd = moment().endOf('day').toDate();

            const records = await Record.find({
                date: {
                    $gte: todayStart,
                    $lt: todayEnd,
                },
            });

            const filteredRecords = records.find(record => {
                const recordTime = record.time;
                return recordTime >= startTime && recordTime <= endTime;
            });

            if (filteredRecords) {
                const {userId, time} = filteredRecords;

                const user = await User.findOne({id: userId});

                const message = [
                    `–ü—Ä–∏–≤–µ—Ç! üëã`,
                    `–ù–∞–ø–æ–º–∏–Ω–∞—é, —á—Ç–æ —á–µ—Ä–µ–∑ —á–∞—Å (–≤ ${time}) —É —Ç–µ–±—è –∑–∞–ø–∏—Å—å –∫–æ –º–Ω–µ –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É.`,
                    `–ï—Å–ª–∏ —Ç–≤–æ–∏ –ø–ª–∞–Ω—ã –ø–æ–º–µ–Ω—è–ª–∏—Å—å, —Å–≤—è–∂–∏—Å—å —Å–æ –º–Ω–æ–π –∏–ª–∏ –æ—Ç–º–µ–Ω–∏ –∑–∞–ø–∏—Å—å ü´∂`,
                ].join('\n');

                await this.bot.telegram.sendMessage(user.chatId, message);
                this.logger.info('–ß–∞—Å–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');

            } else {
                this.logger.info('–ó–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
            }
        });
    }

    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
     * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∞—é—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 10:00.
     */
    async scheduleNotifications() {
        cron.schedule('0 10 * * *', async () => {
            const notification = await Notification.findOneAndDelete();
            if (!notification) return;

            const users = await User.find({}, {chatId: 1});
            const filePath = path.join(process.cwd(), notification.photoNotification);

            const mediaGroup = [
                {
                    type: 'photo',
                    media: {source: filePath},
                    caption: notification.messageNotification,
                },
            ];

            const messagePromises = users.map((user) =>
                this.bot.telegram.sendMediaGroup(user.chatId, mediaGroup)
            );
            await Promise.all(messagePromises);
            fs.unlinkSync(filePath);
            this.logger.info('–û–ø–æ–≤–µ—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã');
        });
    }

    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π.
     * –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø–∏—Å–∏ —É–¥–∞–ª—è—é—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 10:00.
     */
    async scheduleCleanUp() {
        cron.schedule('0 10 * * *', async () => {
            const cutoffDate = moment().subtract(1, 'day').toDate();

            await Record.deleteMany({
                date: {$lt: cutoffDate},
            });
            this.logger.info('–£—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø–∏—Å–∏ —É–¥–∞–ª–µ–Ω—ã');
        });
    }

    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏ –∑–∞–¥–∞—á.
     */
    start() {
        this.scheduleHourlyReminders();
        this.scheduleReminders();
        this.scheduleNotifications();
        this.scheduleCleanUp();
        this.logger.info('–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏ –∑–∞–¥–∞—á –∑–∞–ø—É—â–µ–Ω—ã');
    }
}

module.exports = ScheduledTasksHandler;
